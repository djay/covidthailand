name: Update Thailand Covid Data
on:
  push:
    branches:
      - main
  pull_request:
    branches-ignore:
      - "releases/**"
  schedule: # can be up to 20min late. So better to have more updates
    # - cron: "*/19 23 * * *" # Quick checks for briefing after 7am
    - cron: "55 23 * * *" # after midnight is delayed
#    - cron: "*/15 00-02 * * *" # Quick checks for briefing after 7am (but often after 8:30am)
    # - cron: "45 23 * * *" # 07:15 Dashboard
    # - cron: "02 00 * * *" # 08:02 Dashboard
    # - cron: "25 00 * * *" # 08:45 Dashboard
    - cron: "05 01 * * *" # 09:05 Dashboard
#    - cron: "25 05 * * *" # 12:25 daily briefing - official tweet
    - cron: "*/45 06-09 * * *" # Quick checks for briefing after 1pm
    # - cron: "00 06 * * *" # 13:00 daily briefing - briefing pdf
    # - cron: "40 06 * * *" # 13:40 daily briefing - briefing pdf
    # - cron: "50 07 * * *" # 14:50 in case briefing was uploaded late - #TODO: currently even later
#    - cron: "20 10 * * *" # 17:20 new PUI number
#    - cron: "20 14 * * *" # 23:20 test data/situation report/vaccination report
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    # permissions:
    #   statuses: write
    steps:
      - uses: actions/checkout@v2
      # - name: Get Cached docs
      #   uses: actions/checkout@v2
      #   with:
      #     repository: djay/covid_thailand_inputs
      #     path: inputs
      #     lfs: true
      - uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "Asia/Bangkok"
      - name: Get current date
        id: date
        run: |
          echo "::set-output name=date::$(TZ=Asia/Bangkok date +'%Y-%m-%d')"
          echo "::set-output name=yesterday::$(TZ=Asia/Bangkok date --date=yesterday +'%Y-%m-%d')"
          echo "::set-output name=month::$(TZ=Asia/Bangkok date +'%Y-%m')"
          echo "::set-output name=year::$(TZ=Asia/Bangkok date +'%Y')"
          echo "::set-output name=hour::$(TZ=Asia/Bangkok date +'%H')"
          echo "::set-output name=time::$(TZ=Asia/Bangkok date +'%H:%M')"
          echo "::set-output name=briefingurl::http://media.thaigov.go.th/uploads/public_img/source/$(TZ=Asia/Bangkok date +'%d%m')$(($(TZ=Asia/Bangkok date +'%Y')-1957)).pdf"
          echo "::set-output name=briefingfile::inputs/briefings/$(TZ=Asia/Bangkok date +'%d%m')$(($(TZ=Asia/Bangkok date +'%Y')-1957)).pdf"
      - name: Check briefing doc available
        id: briefing
        continue-on-error: true
        uses: jtalk/url-health-check-action@v1.5
        with:
          url: ${{ steps.date.outputs.briefingurl }}
          follow-redirect: yes
      - name: Check api available
        id: api
        continue-on-error: true
        run: |
           (curl -sL https://covid19.ddc.moph.go.th/api/Cases/today-cases-by-provinces | grep ${{ steps.date.outputs.date }})
      - name: api available or it's a push
        id: goready
        if: ${{ (github.event_name != 'schedule' || steps.api.outcome == 'success') }}
        run: |
          echo  "'${{ github.event_name }}'(github.event_name)'	!= 'schedule' OR"
          echo  "${{ steps.date.outputs.hour }}(steps.date.outputs.hour) < 13 OR"
          echo  "'${{ steps.briefing.outcome }}'(steps.briefing.outcome) == 'success' AND"
      - name: Get release datasets
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          file: "datasets.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract datasets
        run: |
          tar -xzvf datasets.tar.gz
          rm datasets.tar.gz
      - name: Api not done yet
        id: goapi
        if: ${{ steps.api.outcome == 'success' }}
        continue-on-error: true
        run: (! grep ${{ steps.date.outputs.date }} api/cases_by_province.csv )
      - name: Dash not done yet
        id: dash
        # if: ${{ steps.api.outcome == 'success' && steps.goapi.outcome != 'success' }}
        continue-on-error: true
        run: (! grep ${{ steps.date.outputs.date }} api/moph_dashboard_prov.csv )
      - name: Cache multiple paths
        id: cache
        if: ${{ steps.goready.outcome == 'success' || steps.dash.outcome == 'success' || steps.briefing.outcome == 'success'}}
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}
            /tmp/tika-server.jar
            /tmp/tika-server.jar.md5
          # key is evaluated only at the start so no way we can based it on files downloaded
          # without checking them all first. Time is hack that will cause caching on every run
          # see https://github.com/actions/cache/issues/135
          key: ${{ runner.os }}-${{ steps.date.outputs.date }}-${{ steps.date.outputs.time }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.date.outputs.date }}
            ${{ runner.os }}-${{ steps.date.outputs.yesterday }}
            ${{ runner.os }}-${{ steps.date.outputs.month }}
            ${{ runner.os }}-${{ steps.date.outputs.year }}
            ${{ runner.os }}
      - name: Get release with cached docs
        id: docsrelease
        if: ${{ steps.goready.outcome == 'success' || steps.dash.outcome == 'success' || steps.briefing.outcome == 'success'}}
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          file: "inputs.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract cached docs  # TODO; should be before or after proper cache? or conditional on cache being empty?
        if: ${{ steps.docsrelease.outcome == 'success' }}
        run: |
          tar -xzvf inputs.tar.gz
          rm inputs.tar.gz
      - name: du
        if: ${{ steps.docsrelease.outcome == 'success' }}
        run: |
          du -ha * | sort -h
      - name: go if briefing ready
        id: gofull
        if: ${{ github.event_name	!= 'schedule' ||  (steps.briefing.outcome == 'success' && hashFiles(steps.date.outputs.briefingfile) == '') }}
        run: |
          echo  "'${{ github.event_name }}'(github.event_name)'	!= 'schedule' OR"
          echo  "${{ steps.date.outputs.hour }}(steps.date.outputs.hour) < 13 OR"
          echo  "('${{ steps.briefing.outcome }}'(steps.briefing.outcome) == 'success' AND"
          echo  " '${{ hashFiles(steps.date.outputs.briefingfile) }}'(hashFiles(${{ steps.date.outputs.briefingfile }}) == '')"
      - name: Apt update
        if: ${{ steps.gofull.outcome == 'success' || steps.goapi.outcome == 'success' || steps.dash.outcome == 'success' }}
        id: dep_apt
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ghostscript python3-tk
      - name: Set up Python
        id: goscrape
        if: ${{ steps.gofull.outcome == 'success' || steps.goapi.outcome == 'success' || steps.dash.outcome == 'success' }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.10
          cache: 'pip'
      - uses: actions/setup-java@v1
        if: ${{ steps.goscrape.outcome == 'success' }}
        with:
          java-version: 15
      - name: Install dependencies
        if: ${{ steps.goscrape.outcome == 'success' }}
        id: dep
        run: |
          python3 -m pip install --upgrade pip
          pip install wheel
          pip install -r requirements.txt --use-deprecated=html5lib --use-deprecated=legacy-resolver
      - name: is dash ready
        id: godash
        if: ${{ steps.dep.outcome == 'success' && steps.dep.dash != 'success' && github.event_name	== 'schedule'}}
        continue-on-error: true
        run: python -c "import covid_data_dash; covid_data_dash.check_dash_ready()"
      - name: Run tests
        if:  ${{ github.event_name	!= 'schedule'}}
        run: pytest
        env:
           TIKA_VERSION: 1.24 # Prevent delays in upgrades
           DRIVE_API_KEY: ${{ secrets.DRIVE_API_KEY }}
      - name: Scrape Covid Data API
        id: updateapi
        if: ${{ steps.gofull.outcome != 'success' && steps.godash.outcome != 'success' && steps.goapi.outcome == 'success' }}
        run: |
            python covid_data_api.py
        env:
           TIKA_VERSION: 1.24 # Prevent delays in upgrades
           DRIVE_API_KEY: ${{ secrets.DRIVE_API_KEY }}
      - name: Scrape Covid Data
        id: update
        if: ${{ steps.gofull.outcome == 'success' || steps.godash.outcome == 'success' || github.event_name	!= 'schedule' }}
        run: |
            python covid_plot.py
        env:
           TIKA_VERSION: 1.24 # Prevent delays in upgrades
           DRIVE_API_KEY: ${{ secrets.DRIVE_API_KEY }}
      - name: outputfiles.txt
        continue-on-error: true
        run:
          du inputs | tee outputfiles.txt
      - id: can-deploy
        env:
            MY_KEY: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        if: "${{ env.MY_KEY != '' }}"
        run: echo "::set-output name=key::true"
      # - name: Push cached docs to repo
      #   run: |
      #     cd inputs
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com
      #     git add .
      #     git commit -m "generated"
      #     git push

      - uses: ruby/setup-ruby@v1
        id: gonetlify
        if: ${{ (steps.update.outcome == 'success' || steps.updateapi.outcome == 'success') && steps.can-deploy.outputs.key == 'true' }}
        with:
          ruby-version: 2.7.2 # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Jekyll Build
        if: ${{ steps.gonetlify.outcome == 'success' }}
        run: |
          bundle config set --local path vendor/bundle
          bundler install --jobs 4 --retry 3
          sed -i 's/https:\/\/practical-ritchie-cca141.netlify.app//g' README.md
          sed -i 's/https:\/\/practical-ritchie-cca141.netlify.app//g' downloads.md
          sed -i 's#!\[.*\](\(.*_.*\)\.png)#<a href="\1.svg" target="_black"><object width="100%" type="image/svg+xml" data="\1.svg"><img src="\1.png" /></object></a>#g' README.md
          sed -Ei 's#\[(.*)\]((.*_.*)\.png)#<a href="\2.svg" target="_black">\1</a>#g' README.md
          bundle exec jekyll build --destination=./_site
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Deploy to Netlify
        if: ${{ steps.gonetlify.outcome == 'success' }}
        id: netlify
        uses: nwtgck/actions-netlify@v1.2.2
        with:
          publish-dir: './_site'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 3
      # - name: Upload png to wiki
      #   if: ${{ steps.netlify.outcome == 'success' && github.ref == 'refs/heads/main' }}
      #   uses: kai-tub/external-repo-sync-action@v1
      #   with:
      #       source-directory: "outputs"
      #       include-patterns: "*.png"
      #   env:
      #       GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      # - name: Upload json to wiki
      #   if: ${{ steps.netlify.outcome == 'success' && github.ref == 'refs/heads/main' }}
      #   uses: kai-tub/external-repo-sync-action@v1
      #   with:
      #       source-directory: "api"
      #       include-patterns: "*"
      #   env:
      #       GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: Make cached docs bundle
        id: makerelease
        if: ${{ steps.netlify.outcome == 'success' && github.ref == 'refs/heads/main' }}
        run: |
           tar --exclude="inputs/.git" --exclude="_site" --exclude="._*" --exclude="inputs/json/*.csv" -czvf inputs.tar.gz inputs
           tar -czvf datasets.tar.gz api inputs/json/*.csv
      - name: Upload inputs.tar.gz to existing release
        if: ${{ steps.makerelease.outcome == 'success' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./inputs.tar.gz
          asset_name: inputs.tar.gz
          tag: 1
          overwrite: true
          body: "Updated docs"
      - name: Upload datasets.tar.gz to existing release
        if: ${{ steps.makerelease.outcome == 'success' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./datasets.tar.gz
          asset_name: datasets.tar.gz
          tag: 1
          overwrite: true
          body: "Updated docs"

